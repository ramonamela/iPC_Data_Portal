{"version":3,"sources":["containers/Search/Search.module.css","containers/FileRepository/FileRepository.module.css","containers/Aggs/Aggs.js","containers/Search/Search.js","containers/FileRepository/FileRepository.js"],"names":["module","exports","Component","Search","ChooseProject","index","projectId","update","projects","css","PORTAL_NAME","value","onChange","e","setValue","target","id","map","x","key","graphqlField","find","types","name","Portal","style","props","display","width","componentProps","getTermAggProps","maxTerms","Fragment","initial","ACTIVE_INDEX","ACTIVE_INDEX_NAME","PROJECT_ID","render","Arranger","disableSocket","FileRepository","state","token","refresh","localStorage","getItem","this","setState","console","log","class"],"mappings":"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","file":"static/js/5.ba7e6407.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrangerTable\":\"Search_arrangerTable__1U-uN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"FileRepository_test__9HW-o\"};","import React from 'react';\n\nimport {\n  DatesAgg,\n  BooleanAgg,\n  TermAgg,\n  RangeAgg,\n  AggsPanel,\n} from '@arranger/components/dist/Aggs';\n\n//import { action } from '@storybook/addon-actions';\n\nimport { inCurrentSQON, currentFieldValue } from '@arranger/components/dist/SQONView/utils';\n\nimport Component from 'react-component-component';\n\nimport State from '@arranger/components/dist/State';\n\nimport './Aggs.css';\n\nclass Aggs extends Component {\n\n  render() {\n\n    const bolleanAggs = [\n      {\n        field: 'participants__is_proband',\n        displayName: 'Participants is proband',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            key: '0',\n            doc_count: 2580,\n            key_as_string: 'false',\n          },\n          {\n            key: '1',\n            doc_count: 961,\n            key_as_string: 'true',\n          },\n        ],\n      },\n      {\n        field: 'sequencing_experiments__is_paired_end',\n        displayName: 'Is Paired Ende',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            key: '0',\n            doc_count: 2580,\n            key_as_string: 'false',\n          },\n          {\n            key: '1',\n            doc_count: 961,\n            key_as_string: 'true',\n          },\n        ],\n      },\n      {\n        field: 'sequencing_experiments__is_paired_end_0',\n        displayName: 'Is Paired Ende',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            key: '0',\n            doc_count: 0,\n            key_as_string: 'false',\n          },\n          {\n            key: '1',\n            doc_count: 961,\n            key_as_string: 'true',\n          },\n        ],\n      },\n      {\n        field: 'sequencing_experiments__is_paired_end_1',\n        displayName: 'Is Paired Ende',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            key: '0',\n            doc_count: 2312,\n            key_as_string: 'false',\n          },\n          {\n            key: '1',\n            doc_count: 0,\n            key_as_string: 'true',\n          },\n        ],\n      },\n    ];\n\n    let aggs = [\n      {\n        field: 'color',\n        displayName: 'Color',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            doc_count: 1,\n            key: 'green',\n          },\n          {\n            doc_count: 5,\n            key: 'yellow',\n          },\n          {\n            doc_count: 12,\n            key: 'blue',\n          },\n        ],\n      },\n      {\n        field: 'taste',\n        displayName: 'Taste',\n        active: false,\n        type: 'Aggregations',\n        allowedValues: [],\n        restricted: false,\n        buckets: [\n          {\n            doc_count: 1,\n            key: 'spicy',\n          },\n          {\n            doc_count: 5,\n            key: 'sweet',\n          },\n          {\n            doc_count: 12,\n            key: 'sour',\n          },\n          {\n            doc_count: 5,\n            key: 'salty',\n          },\n          {\n            doc_count: 12,\n            key: 'umami',\n          },\n          {\n            doc_count: 12,\n            key: 'bland',\n          },\n        ],\n      },\n    ];\n\n    return (\n\n      <React.Fragment>\n\n        <div className=\"term-agg-wrapper\">\n          <TermAgg\n            field=\"disease_type\"\n            displayName=\"Disease Type\"\n            buckets={[\n              {\n                doc_count: 2,\n                key: 'Acute Myeloid Leukemia',\n              },\n              {\n                doc_count: 10,\n                key: 'Acinar cell neoplasms',\n              },\n            ]}\n          //handleValueClick={action('Term Agg Selection')}\n          />\n\n          <TermAgg\n            field=\"disease_type\"\n            displayName=\"Disease Type\"\n            buckets={[\n              {\n                doc_count: 2,\n                key: 'Acute Myeloid Leukemia',\n              },\n              {\n                doc_count: 10,\n                key: 'Acinar cell neoplasms',\n              },\n            ]}\n            headerTitle=\"# files\"\n          />\n\n          <State\n            initial={{ sqon: null }}\n            render={({ sqon, update }) => (\n              <div>\n                <div>SQON: {JSON.stringify(sqon)}</div>\n                <div>\n                  {aggs.map(agg => (\n                    // TODO: switch on agg type\n                    <TermAgg\n                      key={agg.field}\n                      {...agg}\n                      handleValueClick={({ generateNextSQON }) =>\n                        update({ sqon: generateNextSQON(sqon) })\n                      }\n                      isActive={d =>\n                        inCurrentSQON({\n                          value: d.value,\n                          dotField: d.field,\n                          currentSQON: sqon,\n                        })\n                      }\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n          />\n\n          <DatesAgg\n            field=\"disease_type\"\n            displayName=\"Disease Type\"\n            stats={{\n              // expects linux timestamp\n              min: 1529539200125,\n              max: 1529539259913,\n            }}\n          //handleValueClick={action('Term Agg Selection')}\n          />\n\n          <Component initialState={{ sqon: null }}>\n            {({ state: { sqon }, setState }) => (\n              <div>\n                <div>SQON: {JSON.stringify(sqon)}</div>\n                <div>\n                  <DatesAgg\n                    field=\"disease_type\"\n                    displayName=\"Disease Type\"\n                    stats={{\n                      min: 1529539200125,\n                      max: 1529539259913,\n                    }}\n                    handleDateChange={({ generateNextSQON = () => { } } = {}) =>\n                      setState({ sqon: generateNextSQON(sqon) })\n                    }\n                    getActiveValue={({ op, field }) =>\n                      currentFieldValue({\n                        op,\n                        dotField: field,\n                        sqon,\n                      })\n                    }\n                  />\n                </div>\n              </div>\n            )}\n          </Component>\n\n          <RangeAgg\n            field=\"cases__diagnoses__days_to_death\"\n            displayName=\"Diagnoses Days To Death\"\n            stats={{\n              min: 15,\n              max: 820,\n              count: 1000,\n              avg: 70,\n              sum: 15000,\n            }}\n          //handleChange={action(`Range Change`)}\n          />\n\n          <State\n            initial={{ sqon: null }}\n            render={({ sqon, update }) => (\n              <div className=\"range with sqon\">\n                <div>SQON: {JSON.stringify(sqon)}</div>\n                <RangeAgg\n                  field=\"cases__diagnoses__days_to_death\"\n                  displayName=\"Diagnoses Days To Death\"\n                  unit={'d'}\n                  stats={{\n                    min: 15,\n                    max: 820,\n                    count: 1000,\n                    avg: 70,\n                    sum: 15000,\n                  }}\n                  handleChange={({ generateNextSQON }) =>\n                    update({ sqon: generateNextSQON(sqon) })\n                  }\n                />\n              </div>\n            )}\n          />\n\n          <BooleanAgg\n            field=\"cases__diagnoses__days_to_death\"\n            displayName=\"Diagnoses Days To Death\"\n            buckets={[\n              {\n                key: '0',\n                doc_count: 2580,\n                key_as_string: 'false',\n              },\n              {\n                key: '1',\n                doc_count: 961,\n                key_as_string: 'true',\n              },\n            ]}\n          //handleChange={action(`Range Change`)}\n          />\n\n          <State\n            initial={{ sqon: null }}\n            render={({ sqon, update }) => (\n              <div>\n                <div>SQON: {JSON.stringify(sqon)}</div>\n                <div>\n                  {bolleanAggs.map(agg => (\n                    <BooleanAgg\n                      key={agg.field}\n                      {...agg}\n                      handleValueClick={({ generateNextSQON }) =>\n                        update({ sqon: generateNextSQON(sqon) })\n                      }\n                      isActive={d =>\n                        inCurrentSQON({\n                          value: d.value,\n                          dotField: d.field,\n                          currentSQON: sqon,\n                        })\n                      }\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n          />\n\n          <State\n            initial={{ index: '', sqon: {} }}\n            render={({ index, update }) => (\n              <div>\n                <label>index: </label>\n                <input // <-- could be a dropdown of available indices\n                  value={index}\n                  onChange={e => update({ index: e.target.value })}\n                />\n                {index && (\n                  <div>\n                    <AggsPanel aggs={aggs} index={index} debounceTime={200} />\n                  </div>\n                )}\n              </div>\n            )}\n          />\n\n        </div>\n\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default Aggs;\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport classes from './Search.module.css';\n\nimport {\n  PORTAL_NAME,\n  ACTIVE_INDEX,\n  ACTIVE_INDEX_NAME,\n  PROJECT_ID,\n  deleteValue,\n  setValue,\n} from '@arranger/components/dist/utils/config';\n\nimport State from '@arranger/components/dist/State';\n\nimport {\n  Arranger,\n  GetProjects,\n  Aggregations,\n  CurrentSQON,\n  Table\n} from '@arranger/components/dist/Arranger';\n\n\nclass Search extends Component {\n\n  render() {\n\n    const ChooseProject = ({ index, projectId, update, projects }) => {\n      return (\n        <div\n          css={`\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            height: 100%;\n            justify-content: center;\n          `}\n        >\n          <h2\n            css={`\n              margin-top: 0;\n            `}\n          >\n            {PORTAL_NAME}\n          </h2>\n          <select\n            value={projectId}\n            onChange={e => {\n              setValue('PROJECT_ID', e.target.value);\n              update({\n                projectId: e.target.value,\n              });\n            }}\n          >\n            <option id=\"version\">Select a version</option>\n            {projects.map(x => (\n              <option key={x.id} value={x.id}>\n                {x.id}\n              </option>\n            ))}\n          </select>\n          <select\n            value={index}\n            onChange={e => {\n              setValue('ACTIVE_INDEX', e.target.value);\n\n              let graphqlField = projects\n                .find(x => x.id === projectId)\n                ?.types ?.types.find(x => x.index === e.target.value).name;\n\n              setValue('ACTIVE_INDEX_NAME', graphqlField);\n              update({\n                index: e.target.value,\n                graphqlField,\n              });\n            }}\n          >\n            <option id=\"version\">Select an index</option>\n            {projects\n              .find(x => x.id === projectId)\n              ?.types ?.types ?.map(x => (\n                <option key={x.index} value={x.index}>\n                  {x.index}\n                </option>\n              ))}\n          </select>\n        </div>\n      );\n    };\n\n    const Portal = ({ style, ...props }) => {\n      return (\n        <div style={{ display: 'flex', ...style }}>\n          <Aggregations\n            style={{ width: 300 }}\n            componentProps={{\n              getTermAggProps: () => ({\n                maxTerms: 3,\n              }),\n            }}\n            {...props}\n          />\n          <div\n          >\n            <CurrentSQON {...props} />\n            <Table {...props} />\n          </div>\n        </div>\n      );\n    };\n\n    return (\n\n      <React.Fragment>\n\n        <State\n          initial={{\n            index: ACTIVE_INDEX,\n            graphqlField: ACTIVE_INDEX_NAME,\n            projectId: PROJECT_ID,\n          }}\n          render={({ index, graphqlField, projectId, update }) => {\n            return index && projectId ? (\n              <Arranger\n                disableSocket\n                index={index}\n                graphqlField={graphqlField}\n                projectId={projectId}\n                render={props => {\n                  return (\n                    <React.Fragment>\n                      <Portal {...{ ...props, graphqlField, projectId }} />\n                    </React.Fragment>\n                  );\n                }}\n              />) : (\n                <GetProjects\n                  render={props => (\n                    <ChooseProject\n                      {...props}\n                      index={index}\n                      projectId={projectId}\n                      update={update}\n                    />\n                  )}\n                />\n              );\n          }}\n        />\n\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default Search;\n\n","import React, { Component } from 'react';\nimport Aggs from '../Aggs/Aggs';\nimport Search from '../Search/Search';\nimport classes from './FileRepository.module.css';\n\nclass FileRepository extends Component {\n    constructor(props){\n      super(props)\n\n      this.state = {\n        token : null,\n        refresh : null \n      }\n  \n    }\n\n  componentDidMount () {\n    const token = localStorage.getItem(\"react-token\");\n    const refresh = localStorage.getItem(\"react-refresh-token\");  \n    this.setState({\n      token: token,\n      refresh: refresh\n    })\n  }\n\n  render() {\n\n    console.log(\"Token: \", this.state.token);\n    console.log(\"Refresh token: \", this.state.refresh);\n\n    return (\n\n      <React.Fragment>\n        \n        <br/>\n        \n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                {/*<div class=\"col-2\">\n                    <Aggs />\n                </div>*/}\n                <div class=\"col-12\">\n                    <div class=\"row\">\n                        <Search />\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default FileRepository;\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}